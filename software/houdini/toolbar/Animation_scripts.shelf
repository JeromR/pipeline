<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="Trajectory" label="Trajectory" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils
obj=hou.node("/obj")
selection = toolutils.activePane(kwargs).selectObjects(prompt='Select objects')
if hou.node('/obj/Cam_pos1')==None:
    cam_pos=obj.createNode("Cam_pos","Cam_pos1")
    cam_pos.setColor(hou.Color((0.0,0.0,1.0)))
    cam_pos.moveToGoodPosition()
    cam_pos.setDisplayFlag(0)
    cam_pos.setSelectableInViewport(0)
if hou.node('/obj/Trajectories')==None:
    subnet=obj.createNode("subnet","Trajectories")
    subnet.moveToGoodPosition()
    subnet.setSelectableInViewport(0)
    ptg=subnet.parmTemplateGroup()
    for i in range(len(ptg.entries())): ptg.hideFolder(ptg.entries()[i].label(),1)
    startPT = hou.IntParmTemplate("tr_start", "Start Frame",1,(1,),min=1,max=240)
    endPT = hou.IntParmTemplate("tr_end", "End Frame",1,(80,),min=1,max=240)
    useCommon= hou.ToggleParmTemplate("Use_common_color","Use Common Color",default_value=True)
    showKeys= hou.ToggleParmTemplate("Show_Keys_Info","Show Keys Info",default_value=True)
    showOnlyFrames= hou.ToggleParmTemplate("Show_Only_Frames","Show Only Frames",default_value=False,disable_when="{ Show_Keys_Info == 0 }")
    commonColor= hou.FloatParmTemplate("Common_color","Common Color",3,naming_scheme=hou.parmNamingScheme.RGBA,default_value=(1,0,0),look=hou.parmLook.ColorSquare, disable_when='{ Use_common_color == 0 }')
    textScale= hou.FloatParmTemplate("Text_Scale","Text Scale",1,(1.0,))
    textScaleOrtho= hou.FloatParmTemplate("Text_Scale_In_Ortho","Text Scale In Ortho",1,(1.0,))
    mode=hou.MenuParmTemplate("Show","Show Mode",("All","Pos","Rot"),disable_when="{ Show_Keys_Info == 0 } { Show_Only_Frames == 1 }")
    ptg.append(startPT)
    ptg.append(endPT)
    ptg.append(useCommon)
    ptg.append(commonColor)
    ptg.append(showKeys)
    ptg.append(showOnlyFrames)
    ptg.append(mode)
    ptg.append(textScale)
    ptg.append(textScaleOrtho)
    subnet.setParmTemplateGroup(ptg)
    subnet.parm('tr_start').setExpression("$RFSTART")
    subnet.parm('tr_end').setExpression("$RFEND")
    subnet.setColor(hou.Color((1.0,0.0,0.0)))
else: subnet=hou.node('/obj/Trajectories')
#-----------------------------------------
for curObj in selection:
    if all(curObj.path()!=cur_tr.evalParm("Object_Trajectory") for cur_tr in subnet.children()):
        tr=subnet.createNode("Trajectory",curObj.name()+"_trajectory")
        tr.parmTuple("Trajectory_Color").set(curObj.parmTuple('dcolor').eval())
        tr.moveToGoodPosition()
        tr.setParms({'Object_Trajectory':curObj.path()})
        tr.setSelectableInViewport(0)
        tr.parm("Start_Frame").setExpression("ch('../tr_start')")
        tr.parm("End_Frame").setExpression("ch('../tr_end')")
        tr.parm("Show_key_Numbers").setExpression("ch('../Show_Keys_Info')")
        tr.parm("Show_Only_Frames").setExpression("ch('../Show_Only_Frames')")
        tr.parm("Text_Scale").setExpression("ch('../Text_Scale')")
        tr.parm("Text_Scale_In_Ortho").setExpression("ch('../Text_Scale_In_Ortho')")
        tr.parm("Show").setExpression("ch('../Show')")
#----------------------------------------
for obj in subnet.children():
    if hou.node(obj.evalParm("Object_Trajectory"))==None: obj.destroy()]]></script>
  </tool>

  <tool name="Rnd WireClr" label="Rnd WireClr" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils, random
obj=hou.node("/obj")
selection = toolutils.activePane(kwargs).selectObjects(prompt='Select objects')
for obj in selection: 
    obj.parmTuple('dcolor').set((random.random(),random.random(),random.random()))
    color=obj.parmTuple('dcolor').eval()
    obj.parm("use_dcolor").set(1)
    tr=hou.node("/obj/Trajectories/"+obj.name()+"_trajectory")
    if tr!=None: hou.node("/obj/Trajectories/"+obj.name()+"_trajectory").parmTuple('Trajectory_Color').set(color)]]></script>
  </tool>

  <tool name="TrajAutoShow" label="Traj_Auto" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import serutil
subnet=hou.node('/obj/Trajectories')
if subnet!=None:
    if(all(call!=serutil.trAutoShow for call in hou.ui.eventLoopCallbacks())):
        hou.ui.addEventLoopCallback(serutil.trAutoShow)
    else:
        hou.ui.removeEventLoopCallback(serutil.trAutoShow)]]></script>
  </tool>

  <tool name="Keys_Ctrl" label="Keys Ctrl" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils
def keyCheck(frame,seq):
    for s in seq:
        if frame==s.frame(): return 1
    return 0
hou.hscript("undoctrl off")
obj=hou.node("/obj")
selection = toolutils.activePane(kwargs).selectObjects(prompt='Select objects')
clr=hou.Color((0.0,0.0,0.0))
clrGray=hou.Color((0.2,0.2,0.2))
keyM=hou.Keyframe(0.0,0.0)
keyM.setAccel(0.3)
keyM.setSlope(0.0)
keyM.useAccel(1)
result=1
for cur in selection:
    try:
        if cur!=None:
            parName=cur.parent().name()
            if parName[len(parName)-10:len(parName)]=='_keys_ctrl':
                hou.node(cur.parm("Master").evalAsString()).setSelectableInViewport(1)
                cur.parent().destroy()
            else:
                if hou.node(cur.path()+"_keys_ctrl")==None:
#-------------------Check and set keyframes
                    tx=[]
                    ty=[]
                    tz=[]
                    allP=[]
                    txP=cur.parm("tx")
                    tyP=cur.parm("ty")
                    tzP=cur.parm("tz")
                    all=[]
                    allP.append((txP,tyP,tzP))
                    for key in txP.keyframes(): tx.append(key.frame())
                    for key in tyP.keyframes(): ty.append(key.frame())
                    for key in tzP.keyframes(): tz.append(key.frame())
                    all=list(set(tx+ty+tz))
                    all.sort()
                    for p in allP[0]:
                        for f in all:
                            if keyCheck(f,p.keyframes())!=1:
                                if result!=0:
                                    if result==1:
                                        if hou.ui.displayMessage("Tx, Ty, Tz chanels must be keyed equally. \nAutomatic keying can make a bad interpolation. \nSet additional keys automatically? ",buttons=("No","Yes"))==1: result=2
                                        else: result=0
                                    if result!=0:
                                        keyM.setValue(p.evalAtFrame(f))
                                        keyM.setFrame(f)
                                        p.setKeyframe(keyM)
#-------------------------------------------------------------------
                    if result!=0:
                        hou.hscript("undoctrl on")
                        cur_cntr=obj.createNode("subnet",cur.name()+"_keys_ctrl")
                        hou.hscript("undoctrl off")
                        cur_cntr.moveToGoodPosition()
                        cur_cntr.setColor(clrGray)
                        ptg=cur_cntr.parmTemplateGroup()
                        for i in range(len(ptg.entries())): ptg.hideFolder(ptg.entries()[i].label(),1)
                        strKeysPar=hou.StringParmTemplate("Keys_ctrl","Keys Ctrl Objects",1)
                        strBezierPar=hou.StringParmTemplate("Bezier_ctrl","Bezier Ctrl Objects",1)
                        ptg.append(strKeysPar)
                        ptg.append(strBezierPar)
                        cur_cntr.setParmTemplateGroup(ptg)
                        names=""
                        for t in all:
                            null=cur_cntr.createNode("Keyframe_cntr","Key_ctrl_"+str(all.index(t))+"_key")
                            null.moveToGoodPosition()
                            null.parmTuple("t").set(cur.parmTuple("t").evalAtFrame(t))
                            null.parm("Key_Number").set(all.index(t))
                            null.parm("Key_Number").lock(1)
                            null.parm("Key_Frame").set(t)
                            null.parm("Key_Frame").lock(1)
                            null.setColor(clr)
                            if hou.parm('/obj/Trajectories/Use_common_color').eval()!=1:
                                null.parmTuple("color").set(hou.Vector3(hou.node(cur.path()).parmTuple("dcolor").eval())*0.6)
                            null.parm("Master").set(cur.path())
                            names+=null.name()+" "
                        cur_cntr.parm("Keys_ctrl").set(names)
                        hou.hscript("undoctrl on")
                        cur.setSelectableInViewport(0)
#---------------Delete 
                else:
                    keys_ctrl_callback=hou.node('/obj/Keys_ctrl_callback1')
                    keys_ctrl_callback.parm("Ctrl_Sub").set("")
                    keys_ctrl_callback.destroy()
                    cur_cntr=hou.node(cur.parm("Master").eval()+"_keys_ctrl")
                    cur_cntr.parm("Bezier_ctrl").set("")
                    cur_cntr.destroy()
                    hou.node(cur.path()+"_keys_ctrl").destroy()
#------------------------------------------------------------
    except hou.ObjectWasDeleted:None
hou.hscript("undoctrl on")]]></script>
  </tool>

  <tool name="Bezier Ctrl" label="Bezier Ctrl" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils
obj=hou.node("/obj")
colors=(hou.Color((0.85,0.0,0.0)),hou.Color((0.0,0.62,0.0)),hou.Color((0.0,0.0,0.85)))
vMode=hou.parm('/obj/Cam_pos1/View_Mode').eval()
selection = toolutils.activePane(kwargs).selectObjects(prompt='Select objects')
for main in selection:
    ctrl=main.parent()
    name=ctrl.name()
    if main.name()[0:6]=="Bezier":
        keys_ctrl_callback=hou.node('/obj/Keys_ctrl_callback1')
        keys_ctrl_callback.parm("Ctrl_Sub").set("")
        keys_ctrl_callback.destroy()
        main.parent().parm("Bezier_ctrl").set("")
        for child in main.parent().children():
            try: 
                if child.name()[0:6]=="Bezier": child.destroy()
            except hou.ObjectWasDeleted:None
    elif name[len(name)-10:len(name)]=='_keys_ctrl':
        names=""
        i=-1
        var1=["tx","ty","tz"]
        var2=["_X","_Y","_Z"]
        for cur in ctrl.children():
            i+=1
            for q in range(0,3):
                null=ctrl.createNode("Keyframe_ctrl_bezier","Bezier_ctrl_"+str(i)+var2[q])
                null.setParms({"Mode":q,"View_Mode":vMode})
                null.moveToGoodPosition()
                null.parm("Master").set(cur.path())
                null.setColor(colors[q])
                null.parm("Key_mult").set(0.5)
                cur.parm("Bezier_Links").set(cur.parm("Bezier_Links").eval()+null.name()+" ")
                null.hdaModule().posDefStart(hou.node(cur.parm("Master").evalAsString()).parm(var1[q]).keyframes()[cur.parm("Key_Number").eval()], hou.Vector3(cur.parmTuple("t").eval()), null)
                names+=null.name()+" "
        ctrl.parm("Bezier_ctrl").set(names)
        keysCtrl=hou.node("/obj").createNode("Keys_ctrl_callback","Keys_ctrl_callback1")
        keysCtrl.parm("Ctrl_Sub").set(ctrl.name())
        keysCtrl.moveToGoodPosition()]]></script>
  </tool>

  <toolshelf name="Animation Scripts" label="Animation Scripts">
    <memberTool name="Trajectory"/>
    <memberTool name="TrajAutoShow"/>
    <memberTool name="Rnd WireClr"/>
    <memberTool name="Keys_Ctrl"/>
    <memberTool name="Bezier Ctrl"/>
  </toolshelf>
</shelfDocument>
